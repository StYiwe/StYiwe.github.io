<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Swift UIAlertController的简单使用</title>
      <link href="2021/02/03/swift-uialertcontroller-de-jian-dan-shi-yong/"/>
      <url>2021/02/03/swift-uialertcontroller-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift-UIAlertController的简单使用"><a href="#Swift-UIAlertController的简单使用" class="headerlink" title="Swift  - UIAlertController的简单使用"></a>Swift  - UIAlertController的简单使用</h1><blockquote><p>记录一下，方便日后查找</p></blockquote><p>Demo效果如下：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gitiuyluswg30b10nt190.gif" alt="UIAlertController"></p><h4 id="普通提示框"><a href="#普通提示框" class="headerlink" title="普通提示框"></a>普通提示框</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;温馨提示&quot;, message: &quot;现在开始走运了&quot;, preferredStyle: .alert)        alertC.addAction(UIAlertAction.init(title: &quot;好的&quot;, style: .default, handler: nil))present(alertC, animated: true, completion: nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类似删除操作提示框"><a href="#类似删除操作提示框" class="headerlink" title="类似删除操作提示框"></a>类似删除操作提示框</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;温馨提示&quot;, message: &quot;确定删除BUG吗？&quot;, preferredStyle: .alert)        alertC.addAction(UIAlertAction.init(title: &quot;删除&quot;, style: .destructive, handler: &#123; (action) in    print(&quot;删除&quot;)&#125;))alertC.addAction(UIAlertAction.init(title: &quot;取消&quot;, style: .cancel, handler: nil))present(alertC, animated: true, completion: nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带一个textField提示框"><a href="#带一个textField提示框" class="headerlink" title="带一个textField提示框"></a>带一个textField提示框</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;添加数据&quot;, message: nil, preferredStyle: .alert)        &#x2F;&#x2F;添加textFieldalertC.addTextField &#123; (textField) in    &#x2F;&#x2F;这里对textField进行设置    textField.placeholder &#x3D; &quot;请添加内容&quot;&#x2F;&#x2F;            textField.backgroundColor &#x3D; .green&#x2F;&#x2F;设置背景色&#125;alertC.addAction(UIAlertAction.init(title: &quot;确定&quot;, style: .default, handler: &#123; (action) in    &#x2F;&#x2F;这里获取textField的内容进行操作    let text &#x3D; (alertC.textFields?.first)!.text!    print(&quot;输入的内容:\(text)&quot;)    &#x2F;&#x2F;也可以先实例个textField    let textF1 &#x3D; (alertC.textFields?.first)! as UITextField    print(&quot;输入的内容：\(textF1.text!)&quot;)&#125;))present(alertC, animated: true, completion: nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获取输入框的内容：<code>(alertC.textFields?.first)!.text!</code></p></blockquote><h4 id="类似登录带两个textField的提示框"><a href="#类似登录带两个textField的提示框" class="headerlink" title="类似登录带两个textField的提示框"></a>类似登录带两个textField的提示框</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;登录&quot;, message: nil, preferredStyle: .alert)        &#x2F;&#x2F;添加textFieldalertC.addTextField &#123; (textField) in    &#x2F;&#x2F;这里对textField进行设置    textField.placeholder &#x3D; &quot;输入帐号&quot;&#125;alertC.addTextField &#123; (textField) in    &#x2F;&#x2F;这里对textField进行设置    textField.placeholder &#x3D; &quot;输入密码&quot;    textField.isSecureTextEntry &#x3D; true&#x2F;&#x2F;密文显示&#125;alertC.addAction(UIAlertAction.init(title: &quot;登录&quot;, style: .default, handler: &#123; (action) in    &#x2F;&#x2F;这里获取textField的内容进行操作    &#x2F;&#x2F;输入的帐号    let text1 &#x3D; (alertC.textFields?.first)!.text!    &#x2F;&#x2F;输入的密码    let text2 &#x3D; (alertC.textFields?.last)!.text!    print(&quot;帐号：\(text1)\n密码：\(text2)&quot;)&#125;))alertC.addAction(UIAlertAction.init(title: &quot;取消&quot;, style: .cancel, handler: nil))present(alertC, animated: true, completion: nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提示框弹出后自动消失"><a href="#提示框弹出后自动消失" class="headerlink" title="提示框弹出后自动消失"></a>提示框弹出后自动消失</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;成功&quot;, message: nil, preferredStyle: .alert)        present(alertC, animated: true, completion: nil)&#x2F;&#x2F;3秒后提示框消失DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) &#123;    &#x2F;&#x2F;提示框消失    alertC.dismiss(animated: true, completion: nil)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ActionSheet"><a href="#ActionSheet" class="headerlink" title="ActionSheet"></a>ActionSheet</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">let alertC &#x3D; UIAlertController.init(title: &quot;温馨提示&quot;, message: &quot;你准备好了吗？&quot;, preferredStyle: .actionSheet)        alertC.addAction(UIAlertAction.init(title: &quot;准备好了&quot;, style: .destructive, handler: &#123; (action) in    print(&quot;万事俱备&quot;)&#125;))alertC.addAction(UIAlertAction.init(title: &quot;取消&quot;, style: .cancel, handler: nil))present(alertC, animated: true, completion: nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附上<a href="https://github.com/StYiwe/Swift-UIAlertController.git">Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> UIAlertController </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift UISearchController简单使用</title>
      <link href="2021/02/03/swift-uisearchcontroller-jian-dan-shi-yong/"/>
      <url>2021/02/03/swift-uisearchcontroller-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift-UISearchController的简单使用"><a href="#Swift-UISearchController的简单使用" class="headerlink" title="Swift - UISearchController的简单使用"></a>Swift - UISearchController的简单使用</h1><blockquote><p>记录下UISearchController的简单使用，方便后期查找。此次是将UISearchController添加到导航栏上使用的</p></blockquote><p>Demo效果如下</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gismu9exwsg30b10ntai6.gif" alt="UISearchController"></p><h4 id="UISearchController的初始化"><a href="#UISearchController的初始化" class="headerlink" title="UISearchController的初始化"></a>UISearchController的初始化</h4><ul><li>代码如下</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F;&#x2F; 初始化搜索控制器func initSearchController() &#123;    searchC &#x3D; UISearchController.init(searchResultsController: nil)    searchC.searchResultsUpdater &#x3D; self    &#x2F;&#x2F;设置placeholder    searchC.searchBar.placeholder &#x3D; &quot;搜索内容&quot;    &#x2F;&#x2F;设置为false，则搜索出来的内容可点击等操作    searchC.obscuresBackgroundDuringPresentation &#x3D; false    &#x2F;&#x2F;总是显示搜索框,如果不设置，会随着滚动而消失    navigationItem.hidesSearchBarWhenScrolling &#x3D; false    &#x2F;&#x2F;将搜索控制器加到导航栏上    navigationItem.searchController &#x3D; searchC&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：以下两个属性需要注意下</p><p>//设置为false，则搜索出来的内容可点击等操作</p><p>searchC.obscuresBackgroundDuringPresentation = <strong>false</strong></p><p>//总是显示搜索框,如果不设置，会随着滚动而消失</p><p>navigationItem.hidesSearchBarWhenScrolling = <strong>false</strong></p></blockquote><ul><li>实现代理，进行实时搜索</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F;&#x2F; UISearchController代理，实时进行搜索func updateSearchResults(for searchController: UISearchController) &#123;    searchArr &#x3D; dataList.filter(&#123; (str) -&gt; Bool in        &#x2F;&#x2F;localizedCaseInsensitiveContains 返回不区分大小写，包含的数据        return str.localizedCaseInsensitiveContains(searchC.searchBar.text!)    &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里使用了Swift数组自带filter方法,返回一个符合条件的新数组</p></blockquote><p><code>以上就是的UISearchController简单使用，不涉及.searchBar.scopeButtonTitles</code></p><p><a href="https://github.com/StYiwe/Swift-UISearchController.git">Demo地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> UISearchController </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift UITableView的简单使用</title>
      <link href="2021/02/03/swift-uitableview-de-jian-dan-shi-yong/"/>
      <url>2021/02/03/swift-uitableview-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="Swift-UITableView的简单使用"><a href="#Swift-UITableView的简单使用" class="headerlink" title="Swift - UITableView的简单使用"></a>Swift - UITableView的简单使用</h3><blockquote><p> 记录整理下tableView的实现，方便日后查看。分为三部分进行记录学习：</p><p> 1.使用UITableViewCell实现一个简单的tableView</p><p> 2.使用自定义cell实现带索引列表的tableView</p><p> 3.与UISearchBar的简单结合使用</p></blockquote><ul><li>以下是Demo演示</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgmkxg17g30b10nt1az.gif" alt="UITableView"></p><ul><li>以下是代码实现</li></ul><h4 id="使用UITableViewCell实现一个简单的tableView"><a href="#使用UITableViewCell实现一个简单的tableView" class="headerlink" title="使用UITableViewCell实现一个简单的tableView"></a>使用UITableViewCell实现一个简单的tableView</h4><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">&#x2F;&#x2F;&#x2F;&#x2F;  TableView1.swift&#x2F;&#x2F;  UITableView&#x2F;&#x2F;&#x2F;&#x2F;  Created by StYiWe on 2020&#x2F;9&#x2F;14.&#x2F;&#x2F;  Copyright © 2020 stYiwe. All rights reserved.&#x2F;&#x2F;import UIKitclass TableView1: UIViewController, UITableViewDelegate, UITableViewDataSource &#123;    &#x2F;&#x2F;tableView    var tableView &#x3D; UITableView()        &#x2F;&#x2F;数据    var dataList: NSMutableArray &#x3D; []            override func viewDidLoad() &#123;        super.viewDidLoad()        self.view.backgroundColor &#x3D; .white        self.title &#x3D; &quot;使用系统cell&quot;                &#x2F;&#x2F;右上角编辑按钮        self.navigationItem.rightBarButtonItem &#x3D; UIBarButtonItem.init(barButtonSystemItem: .edit, target: self, action: #selector(editAction))                &#x2F;&#x2F;数据        dataList &#x3D; NSMutableArray.init(array: [&quot;🐰&quot;, &quot;秃子&quot;, &quot;鹰酱&quot;, &quot;毛熊&quot;, &quot;棒子&quot;, &quot;脚盆鸡&quot;, &quot;高卢鸡&quot;, &quot;狗大户&quot;, &quot;🐫&quot;, &quot;沙某&quot;, &quot;河马&quot;])                &#x2F;&#x2F;UI        createTableViewUI()            &#125;        &#x2F;&#x2F;MARK: - 实例化tableView    func createTableViewUI() &#123;        tableView &#x3D; UITableView.init(frame: UIScreen.main.bounds, style: .plain)        tableView.delegate &#x3D; self        tableView.dataSource &#x3D; self        &#x2F;&#x2F;注册cell        tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;cellID&quot;)        &#x2F;&#x2F;去除分割线&#x2F;&#x2F;        tableView.separatorStyle &#x3D; .none        &#x2F;&#x2F;去掉多余的分割线        tableView.tableFooterView &#x3D; UIView()                self.view.addSubview(tableView)    &#125;        &#x2F;&#x2F;MARK: - 编辑    @objc func editAction() &#123;        &#x2F;&#x2F;设置可编辑        tableView.setEditing(true, animated: true)                &#x2F;&#x2F;完成按钮        self.navigationItem.rightBarButtonItem &#x3D; UIBarButtonItem.init(barButtonSystemItem: .done, target: self, action: #selector(doneAction))    &#125;        &#x2F;&#x2F;MARK: - 编辑完成    @objc func doneAction() &#123;        &#x2F;&#x2F;设置不可编辑        tableView.setEditing(false, animated: true)                &#x2F;&#x2F;右上角编辑按钮        self.navigationItem.rightBarButtonItem &#x3D; UIBarButtonItem.init(barButtonSystemItem: .edit, target: self, action: #selector(editAction))            &#125;        &#x2F;&#x2F;MARK: - 返回多少行    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;        return dataList.count    &#125;        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;cellID&quot;, for: indexPath)                cell.textLabel?.text &#x3D; dataList[indexPath.row] as? String                return cell    &#125;    &#x2F;&#x2F;MARK: - 行高    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123;        return 60    &#125;        &#x2F;&#x2F;MARK: - 点击cell    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) &#123;        print(dataList[indexPath.row])    &#125;        &#x2F;&#x2F;MARK: - 使cell的分割线与屏幕两端对齐    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) &#123;        if cell.responds(to: #selector(setter: UITableViewCell.separatorInset)) &#123;            cell.separatorInset &#x3D; .zero        &#125;        if cell.responds(to: #selector(setter: UITableViewCell.layoutMargins)) &#123;            cell.layoutMargins &#x3D; .zero        &#125;    &#125;        &#x2F;&#x2F;MARK: - 设置编辑样式    func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -&gt; UITableViewCell.EditingStyle &#123;        &#x2F;&#x2F;编辑的时候返回带有选择按钮的样式&#x2F;&#x2F;        return UITableViewCell.EditingStyle(rawValue: UITableViewCell.EditingStyle.RawValue(UInt8(UITableViewCell.EditingStyle.insert.rawValue) | UInt8(UITableViewCell.EditingStyle.delete.rawValue)))!                &#x2F;&#x2F;添加&#x2F;&#x2F;        return .insert                &#x2F;&#x2F;删除        return .delete    &#125;        &#x2F;&#x2F;MARK: - 删除单元格    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) &#123;        if editingStyle &#x3D;&#x3D; .delete &#123;            print(&quot;要删除\(dataList[indexPath.row])&quot;)                        &#x2F;&#x2F;提示            let alertC &#x3D; UIAlertController.init(title: &quot;温馨提示&quot;, message: &quot;确定要删除\(dataList[indexPath.row])？&quot;, preferredStyle: .alert)            alertC.addAction(UIAlertAction.init(title: &quot;确定&quot;, style: .destructive, handler: &#123; (UIAlertAction) in                self.dataList.removeObject(at: indexPath.row)                tableView.reloadData()            &#125;))                        alertC.addAction(UIAlertAction.init(title: &quot;取消&quot;, style: .cancel, handler: nil))                        present(alertC, animated: true, completion: nil)        &#125;                if editingStyle &#x3D;&#x3D; .insert &#123;            print(&quot;增加&quot;)        &#125;    &#125;        &#x2F;&#x2F;MARK: - 允许排序    func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -&gt; Bool &#123;        return true    &#125;        &#x2F;&#x2F;MARK: - 排序    func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) &#123;                tableView.moveRow(at: sourceIndexPath, to: destinationIndexPath)        dataList.exchangeObject(at: sourceIndexPath.row, withObjectAt: destinationIndexPath.row)        tableView.reloadData()    &#125;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用自定义cell实现带索引列表的tableView"><a href="#使用自定义cell实现带索引列表的tableView" class="headerlink" title="使用自定义cell实现带索引列表的tableView"></a>使用自定义cell实现带索引列表的tableView</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F;&#x2F;&#x2F;  TableView2.swift&#x2F;&#x2F;  UITableView&#x2F;&#x2F;&#x2F;&#x2F;  Created by StYiWe on 2020&#x2F;9&#x2F;14.&#x2F;&#x2F;  Copyright © 2020 stYiwe. All rights reserved.&#x2F;&#x2F;import UIKit&#x2F;&#x2F;cell Identifierlet cellID &#x3D; &quot;cellID&quot;class TableView2: UIViewController, UITableViewDelegate, UITableViewDataSource &#123;        &#x2F;&#x2F;tableView    var tableView &#x3D; UITableView()        &#x2F;&#x2F;数据    var dataList &#x3D; [String]()        &#x2F;&#x2F;处理后的数据(根据首字母进行分组)    var resultDict &#x3D; [String : [String]]()        &#x2F;&#x2F;组头标题数组    var sectionTitles &#x3D; [String]()        override func viewDidLoad() &#123;        super.viewDidLoad()        self.title &#x3D; &quot;带索引的UITableView&quot;        self.view.backgroundColor &#x3D; .white                &#x2F;&#x2F;原始数据        dataList &#x3D; [&quot;🐰&quot;, &quot;秃子&quot;, &quot;鹰酱&quot;, &quot;毛熊&quot;, &quot;Cat&quot;, &quot;棒子&quot;, &quot;脚盆鸡&quot;, &quot;高卢鸡&quot;, &quot;狗大户&quot;, &quot;🐫&quot;, &quot;沙某&quot;, &quot;河马&quot;, &quot;Big Dog&quot;, &quot;Apple&quot;]                &#x2F;&#x2F;数据处理        createResultDict()                &#x2F;&#x2F;tableVIew        tableView &#x3D; UITableView.init(frame: UIScreen.main.bounds, style: .plain)        tableView.delegate &#x3D; self        tableView.dataSource &#x3D; self        &#x2F;&#x2F;去掉多余的分割线        tableView.tableFooterView &#x3D; UIView()        &#x2F;&#x2F;注册cell        tableView.register(UINib(nibName: &quot;TableView2Cell&quot;, bundle: nil), forCellReuseIdentifier: cellID)        self.view.addSubview(tableView)            &#125;        &#x2F;&#x2F;MARK: - 数据处理，根据首字母进行分组    func createResultDict() &#123;        for str in dataList &#123;            &#x2F;&#x2F;获得首字母            let firstLetterIndex &#x3D; str.index(str.startIndex, offsetBy: 1)            var firstLetter &#x3D; String(str[..&lt;firstLetterIndex])                        &#x2F;&#x2F;转成大写字母            firstLetter &#x3D; firstletterFromString(str: firstLetter)                        if var values &#x3D; resultDict[firstLetter] &#123;                values.append(str)                resultDict[firstLetter] &#x3D; values            &#125; else &#123;                resultDict[firstLetter] &#x3D; [str]            &#125;                        &#x2F;&#x2F;组头标题            sectionTitles &#x3D; [String](resultDict.keys)            &#x2F;&#x2F;排序            sectionTitles &#x3D; sectionTitles.sorted(by: &#123;$0 &lt; $1&#125;)        &#125;    &#125;        &#x2F;&#x2F;MARK: - 将中文转成大写字母    func firstletterFromString(str: String) -&gt; String &#123;        &#x2F;&#x2F;转变成可变字符串        let mutableStr &#x3D; NSMutableString.init(string: str)                &#x2F;&#x2F;将中文转变成带声调的拼音        CFStringTransform(mutableStr as CFMutableString, nil, kCFStringTransformToLatin, false)                &#x2F;&#x2F;去掉声调        let pyStr &#x3D; mutableStr.folding(options: .diacriticInsensitive, locale: .current)                &#x2F;&#x2F;将拼音换成大写        let PYStr &#x3D; pyStr.uppercased()                &#x2F;&#x2F;截取大写首字母        let index &#x3D; PYStr.index(PYStr.startIndex, offsetBy: 1)        let firstStr &#x3D; PYStr[..&lt;index]                &#x2F;&#x2F;判断首字母是否为大写        let uppercaseLetter &#x3D; &quot;^[A-Z]$&quot;        let predicateLetter &#x3D; NSPredicate.init(format: &quot;SELF MATCHES %@&quot;, uppercaseLetter)                return String(predicateLetter.evaluate(with: firstStr) ? firstStr : &quot;#&quot;)    &#125;            &#x2F;&#x2F;MARK: - 返回多少组    func numberOfSections(in tableView: UITableView) -&gt; Int &#123;        return sectionTitles.count    &#125;        &#x2F;&#x2F;MARK: - 每组多少行    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;        let key &#x3D; sectionTitles[section]        guard let values &#x3D; resultDict[key] else &#123;            return 0        &#125;        return values.count    &#125;        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: cellID, for: indexPath) as! TableView2Cell                let key &#x3D; sectionTitles[indexPath.section]        let values &#x3D; resultDict[key]                cell.titleLabel.text &#x3D; values?[indexPath.row]                return cell    &#125;        &#x2F;&#x2F;MARK: - 行高    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123;        return 60    &#125;        &#x2F;&#x2F;MARK: - section标题    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? &#123;        return sectionTitles[section]    &#125;        &#x2F;&#x2F;MARK: - 索引列表    func sectionIndexTitles(for tableView: UITableView) -&gt; [String]? &#123;        return sectionTitles    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="与UISearchBar一起使用"><a href="#与UISearchBar一起使用" class="headerlink" title="与UISearchBar一起使用"></a>与UISearchBar一起使用</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">&#x2F;&#x2F;&#x2F;&#x2F;  TableView3.swift&#x2F;&#x2F;  UITableView&#x2F;&#x2F;&#x2F;&#x2F;  Created by StYiWe on 2020&#x2F;9&#x2F;15.&#x2F;&#x2F;  Copyright © 2020 stYiwe. All rights reserved.&#x2F;&#x2F;import UIKitclass TableView3: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate &#123;    &#x2F;&#x2F;searchBar    var searchBar : UISearchBar!        &#x2F;&#x2F;tableView    var tableView : UITableView!        &#x2F;&#x2F;数据    var dataList &#x3D; [&quot;🐰&quot;, &quot;秃子&quot;, &quot;鹰酱&quot;, &quot;毛熊&quot;, &quot;Cat&quot;, &quot;棒子&quot;, &quot;脚盆鸡&quot;, &quot;高卢鸡&quot;, &quot;狗大户&quot;, &quot;🐫&quot;, &quot;沙某&quot;, &quot;河马&quot;, &quot;Big Dog&quot;, &quot;Apple&quot;]        &#x2F;&#x2F;搜索数据    var searchDataList: [String] &#x3D; []            override func viewDidLoad() &#123;        super.viewDidLoad()        self.title &#x3D; &quot;与UISearchBar一起使用&quot;        self.view.backgroundColor &#x3D; .white                &#x2F;&#x2F;搜索数据默认加载全部        searchDataList &#x3D; dataList                &#x2F;&#x2F;UI        creatUI()            &#125;        func creatUI() &#123;        &#x2F;&#x2F;tableView        tableView &#x3D; UITableView.init(frame: UIScreen.main.bounds, style: .plain)        tableView.delegate &#x3D; self        tableView.dataSource &#x3D; self        tableView.tableFooterView &#x3D; UIView()        &#x2F;&#x2F;注册cell        tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;cellID&quot;)        self.view.addSubview(tableView)                &#x2F;&#x2F;searchBar        searchBar &#x3D; UISearchBar.init(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: 60))        &#x2F;&#x2F;显示取消按钮        searchBar.showsCancelButton &#x3D; true        searchBar.delegate &#x3D; self        tableView.tableHeaderView &#x3D; searchBar            &#125;        &#x2F;&#x2F;MARK: - 取消搜索    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) &#123;        self.view.endEditing(true)        searchBar.text &#x3D; &quot;&quot;        searchDataList &#x3D; dataList        tableView.reloadData()    &#125;        &#x2F;&#x2F;MARK: - 搜索代理，每次改变搜索内容都会调用    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) &#123;        print(&quot;搜索内容:\(searchText)&quot;)        &#x2F;&#x2F;没有搜索内容时显示全部数据        if searchText &#x3D;&#x3D; &quot;&quot; &#123;            searchDataList &#x3D; dataList        &#125; else &#123;            &#x2F;&#x2F;获取搜索栏文字，筛选后更新列表            let text &#x3D; searchText.trimmingCharacters(in: .whitespaces)            &#x2F;&#x2F;获取符合的数据            searchFilter(text: text)        &#125;                tableView.reloadData()    &#125;        &#x2F;&#x2F;MARK: - 添加一个筛选器方法:使用Swift数组系统filter方法,返回一个符合条件的新数组    func searchFilter(text: String) &#123;        searchDataList &#x3D; dataList.filter(&#123; (str) -&gt; Bool in            return str.localizedCaseInsensitiveContains(text)        &#125;)    &#125;        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;        return searchDataList.count    &#125;        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;cellID&quot;, for: indexPath)                cell.textLabel?.text &#x3D; searchDataList[indexPath.row]                return cell    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附上<a href="https://github.com/StYiwe/swift.git">Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 删除第三方库里的i386、x86_64等文件</title>
      <link href="2021/02/01/ios-shan-chu-di-san-fang-ku-li-de-i386-x86-64-deng-wen-jian/"/>
      <url>2021/02/01/ios-shan-chu-di-san-fang-ku-li-de-i386-x86-64-deng-wen-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="删除第三方库里的i386、x86-64等文件"><a href="#删除第三方库里的i386、x86-64等文件" class="headerlink" title="删除第三方库里的i386、x86_64等文件"></a>删除第三方库里的i386、x86_64等文件</h4><p>1.打开终端，cd到该库里</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn85d9wybmj30vi02kgls.jpg" alt="image-20201202143623694"></p><p>2.用命令<code>lipo -info AppsFlyerLib</code>查询该库是否包含i386等</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn85d4tp2qj30va01e3ye.jpg" alt="image-20201202143756972"></p><p>3.用命令<code>lipo -remove i386 AppsFlyerLib -o AppsFlyerLib</code>移除对应的文件</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn85d06cptj30v401sq2w.jpg" alt="image-20201202143951284"></p>]]></content>
      
      
      <categories>
          
          <category> 问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i386、x86_64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS添加第三方库后遇到Library not loaded的处理</title>
      <link href="2021/02/01/ios-tian-jia-di-san-fang-ku-hou-yu-dao-library-not-loaded-de-chu-li/"/>
      <url>2021/02/01/ios-tian-jia-di-san-fang-ku-hou-yu-dao-library-not-loaded-de-chu-li/</url>
      
        <content type="html"><![CDATA[<h4 id="参考了其他文章解决的问题，为了加深印象，故记录一下"><a href="#参考了其他文章解决的问题，为了加深印象，故记录一下" class="headerlink" title="参考了其他文章解决的问题，为了加深印象，故记录一下"></a>参考了其他文章解决的问题，为了加深印象，故记录一下</h4><h5 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn859v017ij30yg04atb2.jpg" alt="报错内容"></p><h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><ul><li>在build Phases添加New Copy Files Phase，然后把Destination改为frameworks，然后再加上所需的framework</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn859z7hswj30ul0diwir.jpg" alt="解决思路"></p>]]></content>
      
      
      <categories>
          
          <category> 问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Library-not-loaded </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 隐藏状态栏的问题</title>
      <link href="2021/02/01/ios-yin-cang-zhuang-tai-lan-de-wen-ti/"/>
      <url>2021/02/01/ios-yin-cang-zhuang-tai-lan-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="隐藏状态栏的问题"><a href="#隐藏状态栏的问题" class="headerlink" title="隐藏状态栏的问题"></a>隐藏状态栏的问题</h3><h5 id="1-项目设置了隐藏状态栏，但调用第三方SDK时却显示状态栏的解决方法"><a href="#1-项目设置了隐藏状态栏，但调用第三方SDK时却显示状态栏的解决方法" class="headerlink" title="1.项目设置了隐藏状态栏，但调用第三方SDK时却显示状态栏的解决方法"></a>1.项目设置了隐藏状态栏，但调用第三方SDK时却显示状态栏的解决方法</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn855mveenj30yg0cnt9b.jpg" alt="image-20201224114027971"></p><p><code>解决:</code></p><p>-&gt; 在<code>info.plist</code>中添加<code>View controller-based status bar appearance</code>并设置为<code>NO</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn855qdt6mj30yg0bv40a.jpg" alt="image-20201224114335310"></p><blockquote><p><code>View controller-based status bar appearance</code>设置为<code>NO</code>，表示接收全局配置；设置为<code>YES</code>，表示控制器各自配置，需要配合下面代码使用</p><pre class="line-numbers language-none"><code class="language-none">- (BOOL)prefersStatusBarHidden &#123;    return YES;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> status bar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transporter卡在验证中的解决思路</title>
      <link href="2021/02/01/transporter-qia-zai-yan-zheng-zhong-de-jie-jue-si-lu/"/>
      <url>2021/02/01/transporter-qia-zai-yan-zheng-zhong-de-jie-jue-si-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Transporter卡在验证中的解决思路"><a href="#Transporter卡在验证中的解决思路" class="headerlink" title="Transporter卡在验证中的解决思路"></a>Transporter卡在验证中的解决思路</h1><blockquote><p>记录一次Transporter的使用，主要是这台机器第一次使用Transporter，结果一直卡在验证阶段，期间各种找资料，各种尝试，折腾了两天时间。在此记录下解决过程，以备不时之需。</p></blockquote><h4 id="前因："><a href="#前因：" class="headerlink" title="前因："></a>前因：</h4><blockquote><p>找资料后的结果是Transporter在第一次使用的时候<code>com.apple.amp.itmstransporter</code>文件夹下是没什么内容的，需要下载东西，而这个网速是很慢的，特别是没翻墙的情况下，所以导致一直卡在验证中。</p></blockquote><h4 id="尝试了多种方法解决这个下载的问题"><a href="#尝试了多种方法解决这个下载的问题" class="headerlink" title="尝试了多种方法解决这个下载的问题"></a>尝试了多种方法解决这个下载的问题</h4><ul><li><p>用别人提供的<code>com.apple.amp.itmstransporter</code>文件夹下的内容去做替换，步骤如下：</p><blockquote><p>1.打开访达 -&gt; 前往 -&gt; 前往文件夹，也可以使用快捷键<code>shift</code>+<code>command</code>+<code>G</code></p><p>2.输入<code>/用户/styiwe/资源库/Caches/com.apple.amp.itmstransporter/</code>，前往该文件夹进行替换</p><p>3.找到文件夹下的<code>obr</code> -&gt; <code>2.0.0</code> -&gt; <code>repository.xml</code>，可以选择用文本编辑打开该文件，将里面的用户名替换为本机的用户名（如果不清楚电脑用户名的，可以打开终端查看）</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn851h7zahj30yg0skn4w.jpg" alt="image-20200924141543174"></p></blockquote></li><li><p>自己下载<code>com.apple.amp.itmstransporter</code>内容</p><blockquote><p>打开终端，输入<code>/Applications/Transporter.app/Contents/itms/bin/iTMSTransporter</code>便会自动下载（我的是在有科学上网的情况下下载的，过一会就下载好了，如果没有的话可能需要点时间）</p></blockquote></li><li><p>拿可以正常上传的机器的文件夹下的内容替换</p><blockquote><p>在可以正常使用Transporter的机器上打开访达，前往文件夹<code>/用户/styiwe/资源库/Caches/com.apple.amp.itmstransporter/</code>，将<code>com.apple.amp.itmstransporter</code>文件夹的内容复制粘贴过来（==注：我在使用的时候发现，该文件夹复制后的大小和在可用的机器上查看的大小不一致，会少几M，这也导致了该方法还是有可能无效==）</p></blockquote></li></ul><h4 id="最后经过多次的探索，发现以下步骤可以解决我的困惑"><a href="#最后经过多次的探索，发现以下步骤可以解决我的困惑" class="headerlink" title="最后经过多次的探索，发现以下步骤可以解决我的困惑"></a>最后经过多次的探索，发现以下步骤可以解决我的困惑</h4><p>1.打开终端，输入<code>/Applications/Transporter.app/Contents/itms/bin/iTMSTransporter</code>,下载所需文件，下载完后应该都可以正常使用了</p><p>2.该步骤对大部分人可能不需要，第一步下载完后再进行上传，<code>com.apple.amp.itmstransporter</code>还会进行添加一些文件的操作，这一步一般不会出问题。但我的情况比较特殊，才导致一直无法解决问题，因为条件限制，需要使用指定的网络进行操作，但可能该网络有问题，反正就是上传还是卡在验证中，后面我就切换帐号和网络进行操作，没想到一下就好了，<code>com.apple.amp.itmstransporter</code>文件夹下也添加了必须的文件。然后我就切换回那个帐号和网络，就可以正常上传了。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><ul><li><p>虽然可以正常上传了，但报了一个错误，记录下：</p><blockquote><p>Cannot proceed with delivery: an existing transporter instance is currently uploading this package</p><p>Failed to obtain exclusive lock on token file. Please ensure the following file is not locked by another process: /Users/styiwe/Library/Caches/com.apple.amp.itmstransporter/UploadTokens/MacBook-Pro.local_L2D9LYB2YR_1531987923.itmsp.token</p></blockquote><p>没办法交付，其实是<code>UploadTokens</code>文件下存在多个待交付的文件，可能是我一直解决这个问题所产生的</p></li></ul><p>==解决：==</p><p>同样是前往到文件夹，<code>/用户/styiwe/资源库/Caches/com.apple.amp.itmstransporter/UploadTokens/</code>，将该文件夹下的内容都删了，然后再次提交</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn851opc5ej30nu06w3yv.jpg" alt="image-20200924144147520"></p><p><code>网络好很重要</code></p><p>简单记录下，方便以后查找</p>]]></content>
      
      
      <categories>
          
          <category> 问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transporter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录码云上Git的使用</title>
      <link href="2021/02/01/ji-lu-ma-yun-shang-git-de-shi-yong/"/>
      <url>2021/02/01/ji-lu-ma-yun-shang-git-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>已在码云上创建了仓库</p></blockquote><h4 id="添加项目到仓库中"><a href="#添加项目到仓库中" class="headerlink" title="添加项目到仓库中"></a>添加项目到仓库中</h4><blockquote><p>1.cd 你要上传的项目的文件夹路径<br>2.git全局设置<br>git config –global user.name “user.name”//码云用户名<br>git config –global user.email “user.email”//码云账号<br>3.git init//初始化一个git 仓库<br>4.touch README.md//创建帮助文件<br>5.git add -A//添加所有文件<br>6.git commit -a -m”注释内容”//添加注释<br>7. git remote add origin “上面复制的路径”(你的远程仓库地址，即是码云的项目地址)//和远程仓库进行关联<br>8. git push origin master 或 git push -u origin master//上传仓库到码云</p></blockquote><p>注：若push失败，则需先从码云上将你建的空项目拉取到本地，先执行git pull origin master，再执行git push -u origin master 若任然push失败，则使用此命令 git push –force origin master</p><p>成功上传后刷新码云界面，即可看到项目上传到码云^_^</p><p>(如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p><pre class="line-numbers language-none"><code class="language-none">$ git push origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，将当前分支推送到origin主机的对应分支。</p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p><p>$ git push 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。</p><p><code>$ git push -u origin master</code> 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p><p>)</p><p>顺带记录一些常用的git指令：</p><p>git clone url(项目仓库地址) //克隆一个远程仓库，就是在本地建立一个新的项目。</p><p><code>git pull origin master</code> //如果已经有一个项目，通过这条指令可以直接更新该项目</p><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><blockquote><p>1.git pull origin master （必须要执行的）<br>2.git status<br>3.git add -A<br>4.git commit -a -m “填写修改的内容”<br>5.git push -u origin master</p></blockquote><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><blockquote><p>1.cd到存放项目的文件夹路径<br>2.git clone url(项目仓库地址)</p></blockquote><p>参考 <a href="https://www.jianshu.com/p/f38127104890">奔跑的喔汼</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 接入VK登录</title>
      <link href="2021/02/01/ios-jie-ru-vk-deng-lu/"/>
      <url>2021/02/01/ios-jie-ru-vk-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="接入VK登录"><a href="#接入VK登录" class="headerlink" title="接入VK登录"></a>接入VK登录</h1><p><a href="https://github.com/VKCOM/vk-ios-sdk">官方SDK github</a></p><p><a href="https://github.com/VKCOM/vk-ios-sdk/releases">SDK下载</a></p><p><a href="https://vk.com/dev/ios_sdk">官方文档</a></p><p><a href="https://vk.com/settings?act=security">后台</a></p><h4 id="1-vk后台创建应用-–-地址"><a href="#1-vk后台创建应用-–-地址" class="headerlink" title="1.vk后台创建应用 – 地址"></a>1.vk后台创建应用 – <a href="https://vk.com/editapp?act=create">地址</a></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn83aumgs0j30yg0fvjs7.jpg" alt="image-20201222165934842"></p><h4 id="2-下载SDK"><a href="#2-下载SDK" class="headerlink" title="2.下载SDK"></a>2.下载<a href="https://github.com/VKCOM/vk-ios-sdk/releases">SDK</a></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1go23dk2tbfj312c0u00yw.jpg" alt="image-20210227144830971"></p><h4 id="3-将SDK加入项目中"><a href="#3-将SDK加入项目中" class="headerlink" title="3.将SDK加入项目中"></a>3.将SDK加入项目中</h4><ul><li><p>将下列代码加到<code>info.plist</code>中</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">&lt;key&gt;LSApplicationQueriesSchemes&lt;&#x2F;key&gt;&lt;array&gt;    &lt;string&gt;vk&lt;&#x2F;string&gt;    &lt;string&gt;vk-share&lt;&#x2F;string&gt;    &lt;string&gt;vkauthorize&lt;&#x2F;string&gt;&lt;&#x2F;array&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加成功后如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn83bdr77yj30wg0bi0u3.jpg" alt="image-20201222171425705"></p></li><li><p>在<code>info</code>中，<code>URL Types</code>添加如下内容，其中Identifier和URL Schemes为<code>vk</code>+<code>VK后台创建的应用ID</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn83bie289j30yg0mgq4r.jpg" alt="image-20201222171848263"></p></li></ul><ul><li><p>在需要调用的地方导入<code>#import &lt;VKSdkFramework/VKSdkFramework.h&gt;</code></p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#import &lt;VKSdkFramework&#x2F;VKSdkFramework.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>SDK初始化</p><p>1.将代码放入应用程序委托方法里</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString *,id&gt; *)options &#123;    [VKSdk processOpenURL:url fromApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey]];    return YES;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果您已经添加了FaceBook SDK，并且返回了其中一种方法<code>[FBSDKDelegate ...]</code>，则可以对其进行处理</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">-(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation &#123;    [[FBSDKApplicationDelegate sharedInstance] application:application openURL:url sourceApplication:sourceApplication annotation:annotation];    [VKSdk processOpenURL:url fromApplication:sourceApplication];    return YES;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在需要调用的页面</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">- (**void**)viewDidLoad &#123;[super viewDidLoad];[[VKSdk initializeWithAppId:@&quot;3974615&quot;] registerDelegate:self];    [[VKSdk instance] setUiDelegate:self];    SCOPE &#x3D; @[VK_PER_FRIENDS, VK_PER_EMAIL];    [VKSdk wakeUpSession:SCOPE completeBlock:^(VKAuthorizationState state, NSError *error) &#123;        NSLog(@&quot;state:%lu&quot;,(unsigned long)state);        if (state &#x3D;&#x3D; VKAuthorizationAuthorized) &#123;            NSLog(@&quot;可以登录&quot;);                    &#125; else if (error) &#123;            NSLog(@&quot;发生错误:%@&quot;,error.description);                    &#125;    &#125;];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.添加delegate</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">&lt;VKSdkUIDelegate,VKSdkDelegate&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.在点击VK登录的方法里调用如下方法</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">[VKSdk authorize:SCOPE];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.实现代理方法</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">- (void)vkSdkAccessAuthorizationFinishedWithResult:(VKAuthorizationResult *)result &#123;        if (result.token) &#123;        NSLog(@&quot;userid:%@&quot;,result.token.userId);        NSLog(@&quot;accessToken:%@&quot;,result.token.accessToken);        &#x2F;&#x2F;登录成功，获取到userId，执行后续操作（如登录等）            &#125; else if (result.error) &#123;&#x2F;&#x2F;失败        NSLog(@&quot;error:%@&quot;,result.error.description);    &#125;&#125;- (void)vkSdkNeedCaptchaEnter:(VKError *)captchaError &#123;    VKCaptchaViewController *vc &#x3D; [VKCaptchaViewController captchaControllerWithError:captchaError];    [vc presentIn:self.navigationController.topViewController];&#125;- (void)vkSdkTokenHasExpired:(VKAccessToken *)expiredToken &#123;    [VKSdk authorize:SCOPE];&#125;- (void)vkSdkUserAuthorizationFailed &#123;    NSLog(@&quot;failed&quot;);&#125;- (void)vkSdkShouldPresentViewController:(UIViewController *)controller &#123;    [self.navigationController.topViewController presentViewController:controller animated:YES completion:nil];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><p>如果没有装VK APP，点击VK登录没有提示，暂没做处理</p>]]></content>
      
      
      <categories>
          
          <category> Objective-C笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS创建Framework、Bundle</title>
      <link href="2021/02/01/ios-chuang-jian-framework-bundle/"/>
      <url>2021/02/01/ios-chuang-jian-framework-bundle/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS创建Framework、Bundle"><a href="#iOS创建Framework、Bundle" class="headerlink" title="iOS创建Framework、Bundle"></a>iOS创建Framework、Bundle</h1><h3 id="创建Framework"><a href="#创建Framework" class="headerlink" title="创建Framework"></a>创建Framework</h3><h4 id="1-打开Xcode，新建工程（快捷键，shift-command-N），选择Framework，点击Next，输入工程名"><a href="#1-打开Xcode，新建工程（快捷键，shift-command-N），选择Framework，点击Next，输入工程名" class="headerlink" title="1.打开Xcode，新建工程（快捷键，shift+command+N），选择Framework，点击Next，输入工程名"></a>1.打开Xcode，新建工程（快捷键，shift+command+N），选择Framework，点击Next，输入工程名</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82tc3lljj30yg0ot405.jpg" alt="image-20201009103603437"></p><h4 id="2-进行配置，在TARGETS-gt-Build-Settings中设置相关内容"><a href="#2-进行配置，在TARGETS-gt-Build-Settings中设置相关内容" class="headerlink" title="2.进行配置，在TARGETS-&gt;Build Settings中设置相关内容"></a>2.进行配置，在TARGETS-&gt;Build Settings中设置相关内容</h4><ul><li><p>Build Active Architecture Only 设置成<code>No</code>，意思是当前打包的.framework支持所有设备，否则只能用当前版本的模拟器或真机运行</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82uezrroj30yg0eldhb.jpg" alt="image-20201009104328909"></p></li><li><p>Dead Code Stripping 可以设置为No，该选项是编译优化，包瘦身，<code>可不改</code>。Mach-O Type 选中<code>Static Library</code>(静态库)</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82ujnwkzj30yg0lxq5i.jpg" alt="image-20201009105201021"></p></li><li><p>设置framework最低支持版本，不支持mac的话可以把勾去掉</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82uo689oj30yg0jp75e.jpg" alt="image-20201009105502010"></p></li></ul><ul><li><p>在TARGETS-&gt;Build Phases中，将需要暴露出来的文件放在Public中，不想呈现出来的文件放在Project中即可，可以不必放在Private中</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82utxbifj30yg0jzmye.jpg" alt="image-20201009110148456"></p></li><li><p>导入需要被外部引用的头文件</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82v03em3j30yg0jnjtq.jpg" alt="image-20201009113448333"></p></li><li><p>编译运行，使用快捷键<code>command</code>+<code>B</code>即可，如果想要切换debug、release模式的话可以使用快捷键<code>shift</code>+<code>command</code>+<code>,</code></p></li></ul><blockquote><p>如此编译出来的只是适合当前选择的真机或者模拟器，后续再进行合成的操作的记录</p></blockquote><h3 id="创建Bundle"><a href="#创建Bundle" class="headerlink" title="创建Bundle"></a>创建Bundle</h3><blockquote><p>可以像创建framework一样单独创建一个工程，新建工程（<code>shift</code>+<code>command</code>+<code>N</code>），选择<code>macOS</code>，选择<code>Bundle</code>，这里主要记录在framework工程中创建bundle</p></blockquote><h4 id="在framework工程中创建bundle"><a href="#在framework工程中创建bundle" class="headerlink" title="在framework工程中创建bundle"></a>在framework工程中创建bundle</h4><h4 id="1-如下图，点击Next，输入工程名称，也就是bundle的名称"><a href="#1-如下图，点击Next，输入工程名称，也就是bundle的名称" class="headerlink" title="1.如下图，点击Next，输入工程名称，也就是bundle的名称"></a>1.如下图，点击Next，输入工程名称，也就是bundle的名称</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82zunzx0j30u60u0tac.jpg" alt="image-20201009112116499"></p><p>创建完后效果如下图</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82zp1jzzj30yg0c9754.jpg" alt="image-20201009112849472"></p><h4 id="2-Build-Settings修改一些配置"><a href="#2-Build-Settings修改一些配置" class="headerlink" title="2.Build Settings修改一些配置"></a>2.Build Settings修改一些配置</h4><ul><li><p>Base SDK 改为iOS</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82zkcrmtj30yg0fx0ua.jpg" alt="image-20201009114521240"></p></li><li><p>Enable Bitcode 改为No</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82zg2wdoj30yg0ajgmj.jpg" alt="image-20201009114820600"></p></li><li><p>Versioning System 改为None  (<code>为了去掉可执行文件exec</code>)</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82zbyf4aj30yg0b5ab3.jpg" alt="image-20201027173130821"></p></li><li><p>设置最低支持的版本</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82z6wi6oj30yg0huwfs.jpg" alt="image-20201009115304085"></p></li><li><p>添加文件，如下图，把xib、图片等拖到或者创建到该文件夹下就行</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn82yik8vtj30yg0gr75f.jpg" alt="image-20201009115605158"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Objective-C笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS获取设备型号</title>
      <link href="2021/02/01/ios-huo-qu-she-bei-xing-hao/"/>
      <url>2021/02/01/ios-huo-qu-she-bei-xing-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS获取设备型号"><a href="#iOS获取设备型号" class="headerlink" title="iOS获取设备型号"></a>iOS获取设备型号</h1><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">&#x2F;&#x2F; 需要#import &quot;sys&#x2F;utsname.h&quot;+ (NSString *)getDeviceInfo &#123;        struct utsname systemInfo;    uname(&amp;systemInfo);    &#x2F;&#x2F; 获取设备标识Identifier    NSString *platform &#x3D; [NSString stringWithCString:systemInfo.machine encoding:NSASCIIStringEncoding];        &#x2F;&#x2F;iPhone    if ([platform isEqualToString:@&quot;iPhone1,1&quot;]) return @&quot;iPhone 2G&quot;;    if ([platform isEqualToString:@&quot;iPhone1,2&quot;]) return @&quot;iPhone 3G&quot;;    if ([platform isEqualToString:@&quot;iPhone2,1&quot;]) return @&quot;iPhone 3GS&quot;;    if ([platform isEqualToString:@&quot;iPhone3,1&quot;]) return @&quot;iPhone 4&quot;;    if ([platform isEqualToString:@&quot;iPhone3,2&quot;]) return @&quot;iPhone 4&quot;;    if ([platform isEqualToString:@&quot;iPhone3,3&quot;]) return @&quot;iPhone 4&quot;;    if ([platform isEqualToString:@&quot;iPhone4,1&quot;]) return @&quot;iPhone 4S&quot;;    if ([platform isEqualToString:@&quot;iPhone5,1&quot;]) return @&quot;iPhone 5&quot;;    if ([platform isEqualToString:@&quot;iPhone5,2&quot;]) return @&quot;iPhone 5&quot;;    if ([platform isEqualToString:@&quot;iPhone5,3&quot;]) return @&quot;iPhone 5c&quot;;    if ([platform isEqualToString:@&quot;iPhone5,4&quot;]) return @&quot;iPhone 5c&quot;;    if ([platform isEqualToString:@&quot;iPhone6,1&quot;]) return @&quot;iPhone 5s&quot;;    if ([platform isEqualToString:@&quot;iPhone6,2&quot;]) return @&quot;iPhone 5s&quot;;    if ([platform isEqualToString:@&quot;iPhone7,2&quot;]) return @&quot;iPhone 6&quot;;    if ([platform isEqualToString:@&quot;iPhone7,1&quot;]) return @&quot;iPhone 6 Plus&quot;;    if ([platform isEqualToString:@&quot;iPhone8,1&quot;]) return @&quot;iPhone 6s&quot;;    if ([platform isEqualToString:@&quot;iPhone8,2&quot;]) return @&quot;iPhone 6s Plus&quot;;    if ([platform isEqualToString:@&quot;iPhone8,4&quot;]) return @&quot;iPhone SE&quot;;    if ([platform isEqualToString:@&quot;iPhone9,1&quot;]) return @&quot;iPhone 7&quot;;    if ([platform isEqualToString:@&quot;iPhone9,3&quot;]) return @&quot;iPhone 7&quot;;    if ([platform isEqualToString:@&quot;iPhone9,2&quot;]) return @&quot;iPhone 7 Plus&quot;;    if ([platform isEqualToString:@&quot;iPhone9,4&quot;]) return @&quot;iPhone 7 Plus&quot;;    if ([platform isEqualToString:@&quot;iPhone10,1&quot;]) return @&quot;iPhone 8&quot;;    if ([platform isEqualToString:@&quot;iPhone10,4&quot;]) return @&quot;iPhone 8&quot;;    if ([platform isEqualToString:@&quot;iPhone10,2&quot;]) return @&quot;iPhone 8 Plus&quot;;    if ([platform isEqualToString:@&quot;iPhone10,5&quot;]) return @&quot;iPhone 8 Plus (A1897)&quot;;    if ([platform isEqualToString:@&quot;iPhone10,3&quot;]) return @&quot;iPhone X&quot;;    if ([platform isEqualToString:@&quot;iPhone10,6&quot;]) return @&quot;iPhone X&quot;;    if ([platform isEqualToString:@&quot;iPhone11,2&quot;]) return @&quot;iPhone XS&quot;;    if ([platform isEqualToString:@&quot;iPhone11,4&quot;]) return @&quot;iPhone XS Max&quot;;    if ([platform isEqualToString:@&quot;iPhone11,6&quot;]) return @&quot;iPhone XS Max&quot;;    if ([platform isEqualToString:@&quot;iPhone11,8&quot;]) return @&quot;iPhone XR&quot;;    if ([platform isEqualToString:@&quot;iPhone12,1&quot;]) return @&quot;iPhone 11&quot;;    if ([platform isEqualToString:@&quot;iPhone12,3&quot;]) return @&quot;iPhone 11 Pro&quot;;    if ([platform isEqualToString:@&quot;iPhone12,5&quot;]) return @&quot;iPhone 11 Pro Max&quot;;    if ([platform isEqualToString:@&quot;iPhone12,8&quot;]) return @&quot;iPhone SE (2nd generation)&quot;;    if ([platform isEqualToString:@&quot;iPhone13,1&quot;]) return @&quot;iPhone 12 mini&quot;;    if ([platform isEqualToString:@&quot;iPhone13,2&quot;]) return @&quot;iPhone 12&quot;;    if ([platform isEqualToString:@&quot;iPhone13,3&quot;]) return @&quot;iPhone 12 Pro&quot;;    if ([platform isEqualToString:@&quot;iPhone13,4&quot;]) return @&quot;iPhone 12 Pro Max&quot;;        &#x2F;&#x2F;iPad    if ([platform isEqualToString:@&quot;iPad1,1&quot;])   return @&quot;iPad&quot;;    if ([platform isEqualToString:@&quot;iPad2,1&quot;])   return @&quot;iPad 2&quot;;    if ([platform isEqualToString:@&quot;iPad2,2&quot;])   return @&quot;iPad 2&quot;;    if ([platform isEqualToString:@&quot;iPad2,3&quot;])   return @&quot;iPad 2&quot;;    if ([platform isEqualToString:@&quot;iPad2,4&quot;])   return @&quot;iPad 2&quot;;    if ([platform isEqualToString:@&quot;iPad3,1&quot;])   return @&quot;iPad (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad3,2&quot;])   return @&quot;iPad (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad3,3&quot;])   return @&quot;iPad (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad3,4&quot;])   return @&quot;iPad (4th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad3,5&quot;])   return @&quot;iPad (4th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad3,6&quot;])   return @&quot;iPad (4th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad6,11&quot;])  return @&quot;iPad (5th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad6,12&quot;])  return @&quot;iPad (5th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,5&quot;])   return @&quot;iPad (6th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,6&quot;])   return @&quot;iPad (6th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,11&quot;])  return @&quot;iPad (7th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,12&quot;])  return @&quot;iPad (7th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad11,6&quot;])  return @&quot;iPad (8th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad11,7&quot;])  return @&quot;iPad (8th generation)&quot;;            &#x2F;&#x2F;iPad Air    if ([platform isEqualToString:@&quot;iPad4,1&quot;])   return @&quot;iPad Air&quot;;    if ([platform isEqualToString:@&quot;iPad4,2&quot;])   return @&quot;iPad Air&quot;;    if ([platform isEqualToString:@&quot;iPad4,3&quot;])   return @&quot;iPad Air&quot;;    if ([platform isEqualToString:@&quot;iPad5,3&quot;])   return @&quot;iPad Air 2&quot;;    if ([platform isEqualToString:@&quot;iPad5,4&quot;])   return @&quot;iPad Air 2&quot;;    if ([platform isEqualToString:@&quot;iPad11,3&quot;])  return @&quot;iPad Air (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad11,4&quot;])  return @&quot;iPad Air (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad13,1&quot;])  return @&quot;iPad Air (4th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad13,2&quot;])  return @&quot;iPad Air (4th generation)&quot;;        &#x2F;&#x2F;iPad mini    if ([platform isEqualToString:@&quot;iPad2,5&quot;])   return @&quot;iPad mini&quot;;    if ([platform isEqualToString:@&quot;iPad2,6&quot;])   return @&quot;iPad mini&quot;;    if ([platform isEqualToString:@&quot;iPad2,7&quot;])   return @&quot;iPad mini 1&quot;;    if ([platform isEqualToString:@&quot;iPad4,4&quot;])   return @&quot;iPad mini 2&quot;;    if ([platform isEqualToString:@&quot;iPad4,5&quot;])   return @&quot;iPad mini 2&quot;;    if ([platform isEqualToString:@&quot;iPad4,6&quot;])   return @&quot;iPad mini 2&quot;;    if ([platform isEqualToString:@&quot;iPad4,7&quot;])   return @&quot;iPad mini 3&quot;;    if ([platform isEqualToString:@&quot;iPad4,8&quot;])   return @&quot;iPad mini 3&quot;;    if ([platform isEqualToString:@&quot;iPad4,9&quot;])   return @&quot;iPad mini 3&quot;;    if ([platform isEqualToString:@&quot;iPad5,1&quot;])   return @&quot;iPad mini 4&quot;;    if ([platform isEqualToString:@&quot;iPad5,2&quot;])   return @&quot;iPad mini 4&quot;;    if ([platform isEqualToString:@&quot;iPad11,1&quot;])  return @&quot;iPad mini 5&quot;;    if ([platform isEqualToString:@&quot;iPad11,2&quot;])  return @&quot;iPad mini 5&quot;;        &#x2F;&#x2F; iPad Pro    if ([platform isEqualToString:@&quot;iPad6,3&quot;])    return @&quot;iPad Pro (9.7-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad6,4&quot;])    return @&quot;iPad Pro (9.7-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad6,7&quot;])    return @&quot;iPad Pro (12.9-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad6,8&quot;])    return @&quot;iPad Pro (12.9-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad7,1&quot;])    return @&quot;iPad Pro (12.9-inch) (2nd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,2&quot;])    return @&quot;iPad Pro (12.9-inch) (2nd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad7,3&quot;])  return @&quot;iPad Pro (10.5 inch)&quot;;    if ([platform isEqualToString:@&quot;iPad7,4&quot;])  return @&quot;iPad Pro (10.5-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad8,1&quot;])  return @&quot;iPad Pro (11-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad8,2&quot;])  return @&quot;iPad Pro (11-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad8,3&quot;])  return @&quot;iPad Pro (11-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad8,4&quot;])  return @&quot;iPad Pro (11-inch)&quot;;    if ([platform isEqualToString:@&quot;iPad8,5&quot;])  return @&quot;iPad Pro (12.9-inch) (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,6&quot;])  return @&quot;iPad Pro (12.9-inch) (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,7&quot;])  return @&quot;iPad Pro (12.9-inch) (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,8&quot;])  return @&quot;iPad Pro (12.9-inch) (3rd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,9&quot;])  return @&quot;iPad Pro (11-inch) (2nd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,10&quot;])  return @&quot;iPad Pro (11-inch) (2nd generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,11&quot;])  return @&quot;iPad Pro (12.9-inch) (4th generation)&quot;;    if ([platform isEqualToString:@&quot;iPad8,12&quot;])  return @&quot;iPad Pro (12.9-inch) (4th generation)&quot;;    &#x2F;&#x2F;iPod Touch    if ([platform isEqualToString:@&quot;iPod1,1&quot;])   return @&quot;iPod Touch&quot;;    if ([platform isEqualToString:@&quot;iPod2,1&quot;])   return @&quot;iPod Touch 2&quot;;    if ([platform isEqualToString:@&quot;iPod3,1&quot;])   return @&quot;iPod Touch 3&quot;;    if ([platform isEqualToString:@&quot;iPod4,1&quot;])   return @&quot;iPod Touch 4)&quot;;    if ([platform isEqualToString:@&quot;iPod5,1&quot;])   return @&quot;iPod Touch 5&quot;;    if ([platform isEqualToString:@&quot;iPod7,1&quot;])   return @&quot;iPod Touch 6&quot;;    if ([platform isEqualToString:@&quot;iPod9,1&quot;])   return @&quot;iPod Touch 7&quot;;    &#x2F;&#x2F; Apple Watch    if ([platform isEqualToString:@&quot;Watch1,1&quot;])   return @&quot;Apple Watch&quot;;    if ([platform isEqualToString:@&quot;Watch1,2&quot;])   return @&quot;Apple Watch&quot;;    if ([platform isEqualToString:@&quot;Watch2,6&quot;])   return @&quot;Apple Watch Series 1&quot;;    if ([platform isEqualToString:@&quot;Watch2,7&quot;])   return @&quot;Apple Watch Series 1&quot;;    if ([platform isEqualToString:@&quot;Watch2,3&quot;])   return @&quot;Apple Watch Series 2&quot;;    if ([platform isEqualToString:@&quot;Watch2,4&quot;])   return @&quot;Apple Watch Series 2&quot;;    if ([platform isEqualToString:@&quot;Watch3,1&quot;])   return @&quot;Apple Watch Series 3&quot;;    if ([platform isEqualToString:@&quot;Watch3,2&quot;])   return @&quot;Apple Watch Series 3&quot;;    if ([platform isEqualToString:@&quot;Watch3,3&quot;])   return @&quot;Apple Watch Series 3&quot;;    if ([platform isEqualToString:@&quot;Watch3,4&quot;])   return @&quot;Apple Watch Series 3&quot;;  &#x2F;&#x2F; 模拟器    if ([platform isEqualToString:@&quot;i386&quot;])   return @&quot;iPhone Simulator&quot;;    if ([platform isEqualToString:@&quot;x86_64&quot;])  return @&quot;iPhone Simulator&quot;;        return platform;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iOS设备参照<a href="https://www.theiphonewiki.com/wiki/Models#iPhone">网址</a></p><p>jj</p>]]></content>
      
      
      <categories>
          
          <category> Objective-C笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 获取系统参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS Workspace的创建使用</title>
      <link href="2021/02/01/ios-workspace-de-chuang-jian-shi-yong/"/>
      <url>2021/02/01/ios-workspace-de-chuang-jian-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="iOS-Workspace的创建使用"><a href="#iOS-Workspace的创建使用" class="headerlink" title="iOS Workspace的创建使用"></a>iOS Workspace的创建使用</h3><h4 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1.创建文件夹"></a>1.创建文件夹</h4><h4 id="2-创建Workspace工作区间，保存到刚才创建的文件夹下。"><a href="#2-创建Workspace工作区间，保存到刚才创建的文件夹下。" class="headerlink" title="2.创建Workspace工作区间，保存到刚才创建的文件夹下。"></a>2.创建Workspace工作区间，保存到刚才创建的文件夹下。</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7vuwlpr9j30uo0jiwhf.jpg" alt="image"></p><h4 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7vv1vdahj30yg0kpq4d.jpg" alt="image"></p><p>同样的方法创建工程</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7vv7j4wjj30yg0kxdhm.jpg" alt="image"></p><h4 id="4-添加完之后的效果"><a href="#4-添加完之后的效果" class="headerlink" title="4.添加完之后的效果"></a>4.添加完之后的效果</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7vvbkkqmj30vw0lwq42.jpg" alt="image"></p><h4 id="5-这样就可以在一个工程中管理多个项目了"><a href="#5-这样就可以在一个工程中管理多个项目了" class="headerlink" title="5.这样就可以在一个工程中管理多个项目了"></a>5.这样就可以在一个工程中管理多个项目了</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7vvgvt2aj30yg0mj40u.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Objective-C笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workspace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下搭建基于Hexo + Github的个人博客</title>
      <link href="2021/01/29/mac-xia-da-jian-ji-yu-hexo-github-de-ge-ren-bo-ke/"/>
      <url>2021/01/29/mac-xia-da-jian-ji-yu-hexo-github-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近心血来潮，想搭建个人博客，就把搭建过程整理了一下，顺便进行记录，以备将来查看</p></blockquote><h4 id="一-创建GitHub仓库，配置SSH"><a href="#一-创建GitHub仓库，配置SSH" class="headerlink" title="一.创建GitHub仓库，配置SSH"></a>一.创建GitHub仓库，配置SSH</h4><ul><li><p>创建仓库</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn1381c1onj30wl0u0q9j.jpg" alt="image-20210126143721658"></p></li><li><p>配置SSH key</p><p>输入命令</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>yourname和youremail分别对应github的用户名和邮箱</code></p><p>然后开始生成密钥，输入命令</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按提示回车、输入密码等即可生成SSH key，可以通过<code>~/.ssh/id_rsa.pub</code>可以获得SSH key</p><p>如下图：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn13i35fpqj310c0sek8c.jpg" alt="image-20210126144700609"></p></li></ul><ul><li><p>将获得的SSH key复制，打开<code>github</code> -&gt; <code>settings</code> -&gt; <code>SSH and GPG keys</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn13nrzmdrj31m40s6tf7.jpg" alt="image-20210126145228894"></p></li></ul><p>  <img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn13pom773j31lm0t4gq4.jpg" alt="image-20210126145418806"></p><ul><li><p>输入<code>ssh -T git@github.com</code>查看是否成功，如下出现你的用户名就表示成功</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn145de99nj310202q40a.jpg" alt="image-20210126150923960"></p></li></ul><h4 id="二-安装博客需要的框架"><a href="#二-安装博客需要的框架" class="headerlink" title="二.安装博客需要的框架"></a>二.安装博客需要的框架</h4><ul><li>安装 Homebrew</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现错误<code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code>，如下</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn02ievafjj30vo0km790.jpg" alt="image-20210125172705266"></p><ul><li><p>错误原因：判定是DNS污染</p></li><li><p>解决办法：<a href="https://blog.csdn.net/i_CodeBoy/article/details/107386756">地址</a></p><blockquote><p>1.下载一个修改host的软件，例如<a href="https://github.com/oldj/SwitchHosts/releases">switchhosts</a></p><p>2.复制输入如下地址</p><p>199.232.68.133 raw.githubusercontent.com<br>199.232.68.133 user-images.githubusercontent.com<br>199.232.68.133 avatars2.githubusercontent.com<br>199.232.68.133 avatars1.githubusercontent.com</p><p>3.激活</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn02ukgyeij318g0qowhp.jpg" alt="image-20210125173849017"></p></blockquote></li></ul><p>命令行执行成功的话会下载东西，如下：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0347ygloj30vo0kmqj2.jpg" alt="image-20210125174803049"></p><h4 id="三-创建文件夹"><a href="#三-创建文件夹" class="headerlink" title="三.创建文件夹"></a>三.创建文件夹</h4><ul><li><p>在需要的地方新建个空文件夹<code>blog</code></p></li><li><p>新建个终端窗口，<code>cd</code>到文件夹里</p></li><li><p>初始化，<code>hexo init</code>，如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0wcl3qc9j30vo0km79o.jpg" alt="image-20210126103931937"></p></li></ul><ul><li><p>完成后文件夹会多一些文件，如下所示：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0we9mbhzj31400eqn08.jpg" alt="image-20210126104108517"></p></li></ul><h4 id="四-安装博客相关插件"><a href="#四-安装博客相关插件" class="headerlink" title="四.安装博客相关插件"></a>四.安装博客相关插件</h4><ul><li><p>自动部署到github的插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装atom生成插件，便于感兴趣的小伙伴们订阅(RSS订阅)</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在本地Blog根目录下的_config.yml文件中，添加以下配置</p><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;#RSS订阅plugin: -hexo-generator-feed#Feed Atomfeed:     type: atom     path: atom.xml     limit: 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题目录下的_config.yml目录下，添加如下配置</p><pre class="line-numbers language-none"><code class="language-none">rss: &#x2F;atom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装博客首页生成插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-index --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装tag生成插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-tag --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>至此，需要安装的已安装完毕</p></blockquote></li></ul><h4 id="五-创建博客、调试、发布"><a href="#五-创建博客、调试、发布" class="headerlink" title="五.创建博客、调试、发布"></a>五.创建博客、调试、发布</h4><ul><li><p>由于之前已经创建过文件夹，这一步可以忽略，如果没有，可以执行如下命令来创建个文件夹</p><pre class="line-numbers language-none"><code class="language-none">hexo init Blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>撰写博客内容</p><p><code>cd</code>到<code>Blog</code>文件夹下，执行命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new testBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>testBlog</code>是博客的名字，在<code>Blog/source/_posts</code>中就会新建个<code>testBlog.md</code>的文件，然后就可以编辑你的博客内容了</p></li><li><p>本地调试</p><pre class="line-numbers language-none"><code class="language-none">sudo hexo server 或 sudo hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以访问<a href="http://localhost:4000/">http://localhost:4000</a>来查看结果，如下图所示</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0xm8qbr8j30vo0km7hb.jpg" alt="image-20210126112324111"></p></li></ul><ul><li><p>安装发布插件</p><p>在博客文件夹运行下面命令</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>部署到github</p><p>在<code>_config.yml</code>文件的最后一行修改配置</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn142i298kj311k0lmdk4.jpg" alt="image-20210126150638408"></p></li></ul><ul><li><p>运行生成发布博客</p><pre class="line-numbers language-none"><code class="language-none">sudo hexo cleansudo hexo gsudo hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>其中  <code>hexo clean  </code> 清除之前生成的东西，也可以不加</p><p><code>hexo g</code>  是 <code>hexo generate</code> 的缩写，生成静态文章</p><p><code>hexo d</code>  是 <code>hexo deploy</code>  的缩写，部署文章</p></blockquote></li></ul><p>稍等一会，在浏览器访问网址： <a href="https://你的用户名.github.io/">https://你的用户名.github.io</a> 就会看到你的博客啦！！</p><h4 id="六-自定义博客"><a href="#六-自定义博客" class="headerlink" title="六.自定义博客"></a>六.自定义博客</h4><h5 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h5><p>可以通过克隆的方式，把主题克隆到项目<code>/themes</code>路径下，Hexo也有很多<a href="https://hexo.io/themes/">主题</a></p><p><a href="https://github.com/theme-next/hexo-theme-next">next主题</a></p><p>这里以<a href="https://github.com/blinkfox/hexo-theme-matery">matery主题</a>为例</p><p>在blog文件下运行下面命令，将主题克隆下来</p><p><code>git clone https://github.com/blinkfox/hexo-theme-matery themes/matery </code></p><p>结果如下：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn16x67epsj30x40g4whh.jpg" alt="image-20210126164516111"></p><blockquote><p>其中<code>_config.yml</code>文件可以查看该主题的配置信息</p></blockquote><p>主题下载好后，打开<code>blog</code>文件夹的<code>_config.yml</code>，修改<code>theme</code>的内容，如下</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn170rv1juj30ys0esdiw.jpg" alt="image-20210126164846535"></p><p>然后运行一下命令</p><pre class="line-numbers language-none"><code class="language-none">sudo hexo gsudo hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后就可以看到修改过的新主题了</p><blockquote><p>同时该主题有很多插件可以使用，设置下就行，例如字数统计等，具体可以参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p></blockquote><h4 id="七-文章相关设置"><a href="#七-文章相关设置" class="headerlink" title="七.文章相关设置"></a>七.文章相关设置</h4><ul><li>使用<code>hexo new 文章名称</code>命令新建一个blog，顶部会<code>Front-matter</code>可以进行设置，非必填项，但<code>title</code>和<code>date</code>建议要有，如下</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3jc9c5okj31ag07ijrr.jpg" alt="image-20210128172605319"></p><p>​    Front-matter选项详解</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3jhazvurj30u01c7b29.jpg" alt="image-20210128173056574"></p><p>​    最简示例：</p><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    最全示例：</p><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    为了新建文章方便，可以修改下文章模板，把希望带的字段加进去，路径是<code>/scaffolds/post.md</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4e2xsfwhj30zm0eywi3.jpg" alt="image-20210129110944377"></p><ul><li><p>新建文章自动打开本地Markdown编辑器</p><p>写文章时，在控制台执行<code>hexo new &quot;文章名&quot;</code>就会在<code>source/_posts/</code>下生成一篇新的<code>.md</code>文件，但需要手动打开，显得比较麻烦，可以通过以下方式设置成新建文章时自动打开编辑器</p><blockquote><p>在博客的根目录下新建一个文件夹<code>scripts</code>(如果有就不用新建），在此目录下新建一个Javascript文件，文件名据说可随意命名，这里命名为<code>auto_open.js</code></p><p>js文件里添加如下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">></span><span class="token keyword">var</span> exec <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span> <span class="token operator">></span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 请将 Typora 替换为你用的Markdown 编辑器</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'open -a "Typora.app" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署后，新建文章就可以打开编辑器了</p></blockquote></li></ul><h4 id="八-增加百度和谷歌的搜索引擎验证"><a href="#八-增加百度和谷歌的搜索引擎验证" class="headerlink" title="八.增加百度和谷歌的搜索引擎验证"></a>八.增加百度和谷歌的搜索引擎验证</h4><p>1.验证站点，此处以<code>HTML标签验证</code>的方法验证</p><ul><li><p>百度验证</p><p>首先打开<a href="https://ziyuan.baidu.com/linksubmit/url">百度搜索引擎验证</a>，输入博客网址，按提示走，选择<code>HTML便签验证</code>，然后将下方的代码复制下来，网页先不要关</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4otwl53oj31gi0omwiq.jpg" alt="image-20210129172136201"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4ovqudt3j31ag0u0gqq.jpg" alt="image-20210129172325055"></p></li></ul><ul><li><p>谷歌验证</p><p>打开<a href="https://search.google.com/search-console/welcome?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home">谷歌搜索引擎验证</a>,输入博客地址</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4p0k1txsj310d0u0q85.jpg" alt="image-20210129172802516"></p><p>下一步中，选择其他验证方法的<code>HTML标记</code>，复制<code>meta</code>中的代码</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4p2xyeqwj30u013i44s.jpg" alt="image-20210129173020146"></p></li></ul><ul><li><p>打开本地博客主题下的<code>layout/_partial</code> 文件夹，有一个名为<code>head</code>的文件，将上面获得的两行代码粘贴到<code>&lt;head&gt;&lt;/head&gt;</code>之间，保存文件，然后分别执行以下命令部署到Github服务器</p><pre class="line-numbers language-none"><code class="language-none">sudo hexo cleansudo hexo gsudo hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>然后分别点击刚才百度、谷歌的验证按钮进行站点验证</p></li></ul><p>2.生成站点地图</p><ul><li><p>安装<code>sitemap</code>插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>打开本地博客目录下的<code>_config.yml</code>文件，修改url参数为你的博客的首页地址</p><pre class="line-numbers language-none"><code class="language-none">url: http:&#x2F;&#x2F;jonzzs.cn # 修改成你博客的首页地址root: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加以下配置</p><pre class="line-numbers language-none"><code class="language-none"># 自动生成sitemapsitemap:   path: sitemap.xmlbaidusitemap:   path: baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新部署到github</p><pre class="line-numbers language-none"><code class="language-none">sudo hexo cleansudo hexo gsudo hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>3.将站点地图提交到谷歌</p><ul><li><p>打开<a href="https://search.google.com/search-console/sitemaps?resource_id=https://styiwe.github.io/">谷歌站点控制台</a>,输入<code>sitemap.xml</code>，提交</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4qej1xd6j32cc0l2tci.jpg" alt="image-20210129181603881"></p></li></ul><p>4.百度推送</p><ul><li><p>百度主动推送</p><p>在进行操作前，先在<a href="https://ziyuan.baidu.com/linksubmit/url">百度搜索平台</a>处获取相关信息，<code>注册的域名</code>和<code>token</code>，如下图</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c261vlnj31k30u011r.jpg" alt="image-20210202174734658"></p><p>在根目录下，安装插件，使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改根目录下的<code>_config.yml</code>文件，增加如下内容</p><pre class="line-numbers language-none"><code class="language-none">baidu_url_submit:  count: 3 ## 提交最新的3个链接  host: https:&#x2F;&#x2F;***.github.io ## 在百度站长平台中注册的域名  token: &#96;上一步中获取的token&#96; ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，加入新的deployer:</p><pre class="line-numbers language-none"><code class="language-none">deploy:- type: git ## 这是原来的deployer  repo: https:&#x2F;&#x2F;github.com&#x2F;yourusername&#x2F;yourusername.github.com.git  &#x2F;&#x2F;自己的Github仓库地址  branch: master- type: baidu_url_submitter ## 这是新加的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行hexo deploy的时候，新的连接就会被推送了</p></li></ul><ul><li><p>百度自动推送</p><p>安装自动推送JS代码的网页，在页面被访问时，页面url将立即被推送给百度，修改主题目录下的<code>layout/post.ejs</code>文件，添加如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>注：百度站点的验证可能需要比较久的时间</code></p><h4 id="九-Hexo、homebrew操作指令"><a href="#九-Hexo、homebrew操作指令" class="headerlink" title="九.Hexo、homebrew操作指令"></a>九.Hexo、homebrew操作指令</h4><ul><li><p>Hexo操作指令</p><pre class="line-numbers language-none"><code class="language-none">$ hexo clean      #清理缓存$ hexo generate   #生成静态文件$ hexo server     #启动本地服务器$ hexo deploy    #部署或者$ hexo clean      #清理缓存$ hexo g          #生成静态文件$ hexo s          #启动本地服务器$ hexo d         #部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>homebrew操作指令</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 安装 homebrew$ ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;&#x2F;&#x2F; 卸载 homebrew$ ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;&#x2F;&#x2F; 查看版本$ brew -v&#x2F;&#x2F; 下载软件：brew install 软件名如：$ brew install htop, 安装htop&#x2F;&#x2F; 如需要图形安装的软件 要加cask如：$ brew cask install google-chrome&#x2F;&#x2F; 卸载软件:brew uninstall 软件名如: $ brew cask uninstall google-chrome&#x2F;&#x2F; 软件搜索:brew search 软件名如: $ brew search google&#x2F;&#x2F; 列出已安装的包$ brew list&#x2F;&#x2F; 查看软件相关信息:brew info 软件名如：$ brew info google-chrome&#x2F;&#x2F; 删除 Homebrew下载的包$ brew cleanup&#x2F;&#x2F; 更新 Homebrew$ brew update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这篇是window下的搭建教程，还没来得及操作，先记录下<a href="https://yafine-blog.cn/posts/4ab2.html">Yafine的Hexo+github 搭建博客 (超级详细版，精细入微)</a></p><blockquote><p>本文参考了一下文章：</p><p><a href="https://gsl201600.github.io/2019/08/14/mac%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EHexo-Github%E7%9A%84Blog/">gsl的mac 搭建基于Hexo-Github的Blog</a></p><p><a href="https://xiaopangzai.github.io/2019/10/18/GitHub%20Pages%20+%20Hexo%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_Mac/">笑胖仔的GitHub Pages + Hexo免费搭建个人博客_Mac</a></p><p><a href="https://www.cnblogs.com/shwee/p/11421156.html">洪卫的Hexo+Github: 个人博客网站搭建完全教程(看这篇就够了)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
